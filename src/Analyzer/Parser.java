
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzer;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;
import Abstract.Expression;
import Abstract.Instruction;
import Expression.*;
import Instruction.*;
import Types.*;
import Utils.ErrorHandler;


/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\010\000\002\006\010\000" +
    "\002\007\013\000\002\010\003\000\002\014\005\000\002" +
    "\014\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\004\000" +
    "\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\021\004\001\002\000\010\004\015\005" +
    "\011\006\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\012\004\ufffd\005\ufffd\006\ufffd\022" +
    "\ufffd\001\002\000\004\025\100\001\002\000\004\023\054" +
    "\001\002\000\012\004\ufffe\005\ufffe\006\ufffe\022\ufffe\001" +
    "\002\000\012\004\015\005\011\006\010\022\053\001\002" +
    "\000\012\004\ufffb\005\ufffb\006\ufffb\022\ufffb\001\002\000" +
    "\004\023\017\001\002\000\012\004\ufffc\005\ufffc\006\ufffc" +
    "\022\ufffc\001\002\000\004\016\020\001\002\000\004\014" +
    "\021\001\002\000\040\007\033\010\025\011\022\012\035" +
    "\013\043\015\037\016\027\017\041\020\040\021\036\022" +
    "\034\023\030\024\031\025\032\026\023\001\002\000\012" +
    "\013\uffe6\015\uffe6\022\uffe6\024\uffe6\001\002\000\012\013" +
    "\uffec\015\uffec\022\uffec\024\uffec\001\002\000\010\015\ufff7" +
    "\022\ufff7\024\050\001\002\000\012\013\uffe7\015\uffe7\022" +
    "\uffe7\024\uffe7\001\002\000\012\013\ufff1\015\ufff1\022\ufff1" +
    "\024\ufff1\001\002\000\012\013\ufff2\015\ufff2\022\ufff2\024" +
    "\ufff2\001\002\000\012\013\uffeb\015\uffeb\022\uffeb\024\uffeb" +
    "\001\002\000\012\013\uffe9\015\uffe9\022\uffe9\024\uffe9\001" +
    "\002\000\012\013\uffed\015\uffed\022\uffed\024\uffed\001\002" +
    "\000\012\013\uffe8\015\uffe8\022\uffe8\024\uffe8\001\002\000" +
    "\012\013\uffef\015\uffef\022\uffef\024\uffef\001\002\000\012" +
    "\013\uffe5\015\uffe5\022\uffe5\024\uffe5\001\002\000\012\013" +
    "\uffee\015\uffee\022\uffee\024\uffee\001\002\000\012\013\uffea" +
    "\015\uffea\022\uffea\024\uffea\001\002\000\012\013\ufff3\015" +
    "\ufff3\022\ufff3\024\ufff3\001\002\000\012\013\ufff4\015\ufff4" +
    "\022\ufff4\024\ufff4\001\002\000\004\015\047\001\002\000" +
    "\012\013\uffe4\015\uffe4\022\uffe4\024\uffe4\001\002\000\012" +
    "\013\045\015\ufff5\022\ufff5\024\ufff5\001\002\000\040\007" +
    "\033\010\025\011\022\012\035\013\043\015\037\016\027" +
    "\017\041\020\040\021\036\022\034\023\030\024\031\025" +
    "\032\026\023\001\002\000\012\013\ufff0\015\ufff0\022\ufff0" +
    "\024\ufff0\001\002\000\012\004\ufffa\005\ufffa\006\ufffa\022" +
    "\ufffa\001\002\000\040\007\033\010\025\011\022\012\035" +
    "\013\043\015\037\016\027\017\041\020\040\021\036\022" +
    "\034\023\030\024\031\025\032\026\023\001\002\000\012" +
    "\013\045\015\ufff6\022\ufff6\024\ufff6\001\002\000\012\004" +
    "\uffff\005\uffff\006\uffff\022\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\016\055\001\002\000\004\014\056\001" +
    "\002\000\014\007\062\010\057\011\061\012\064\021\063" +
    "\001\002\000\014\007\062\010\057\011\061\012\064\021" +
    "\063\001\002\000\004\015\075\001\002\000\014\007\062" +
    "\010\057\011\061\012\064\021\063\001\002\000\014\007" +
    "\062\010\057\011\061\012\064\021\063\001\002\000\004" +
    "\016\067\001\002\000\014\007\062\010\057\011\061\012" +
    "\064\021\063\001\002\000\016\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\015\uffe3\021\uffe3\001\002\000\016\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\015\uffdf\021\uffdf\001\002\000\004" +
    "\022\070\001\002\000\016\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\015\uffde\021\uffde\001\002\000\014\007\062\010\057" +
    "\011\061\012\064\021\063\001\002\000\016\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\015\uffe2\021\uffe2\001\002\000\014" +
    "\007\062\010\057\011\061\012\064\021\063\001\002\000" +
    "\016\007\uffe0\010\uffe0\011\uffe0\012\uffe0\015\uffe0\021\uffe0" +
    "\001\002\000\012\004\ufff9\005\ufff9\006\ufff9\022\ufff9\001" +
    "\002\000\014\007\062\010\057\011\061\012\064\021\063" +
    "\001\002\000\016\007\uffe1\010\uffe1\011\uffe1\012\uffe1\015" +
    "\uffe1\021\uffe1\001\002\000\004\021\101\001\002\000\040" +
    "\007\033\010\025\011\022\012\035\013\043\015\037\016" +
    "\027\017\041\020\040\021\036\022\034\023\030\024\031" +
    "\025\032\026\023\001\002\000\004\022\103\001\002\000" +
    "\004\024\104\001\002\000\004\016\105\001\002\000\004" +
    "\026\106\001\002\000\004\015\107\001\002\000\012\004" +
    "\ufff8\005\ufff8\006\ufff8\022\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\002\004\001\001\000\014\003\012\004" +
    "\011\005\006\006\015\007\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\051\005\006" +
    "\006\015\007\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\041\011\043\014\023\015\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\045\015\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\050\015\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\064\013\057\001\001\000\006\012" +
    "\064\013\075\001\001\000\002\001\001\000\006\012\064" +
    "\013\072\001\001\000\006\012\064\013\070\001\001\000" +
    "\002\001\001\000\006\012\064\013\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\064\013\071\001\001\000\002\001\001" +
    "\000\006\012\064\013\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\064\013\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\101\011\043\014" +
    "\023\015\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
                public ArrayList<Instruction> sentencias = new ArrayList<>();
                public Stack<String> context = new Stack<>();
                
                //  Variables estáticas para capturar operaciones
                public static Stack<String> operacionesStack = new Stack<>();
                public static List<String> operandosCapturados = new ArrayList<>();
                
                public void syntax_error(Symbol cur_token) {
                        String errorMsg = "Error sintáctico inesperado";
                        if(cur_token.value != null) {
                        errorMsg = "Error en la estructura cerca de: '" + cur_token.value.toString() + "'";
                        }
                        ErrorHandler.AddSyntacticalError("Sintáctico", errorMsg,cur_token.left,cur_token.right);
                }

                public void unrecovered_syntax_error(Symbol cur_token) {
                        String errorMsg = "Error sintáctico irrecuperable";
                        if(cur_token.value != null) {
                        errorMsg = "Error sintáctico irrecuperable cerca de: '" + cur_token.value.toString() + "'";
                        }
                        ErrorHandler.AddSyntacticalError("Sintáctico", errorMsg, cur_token.left, cur_token.right);
                        // Inicializar sentencias si es null para evitar NullPointerException
                        if (sentencias == null) {
                                sentencias = new ArrayList<>();
                        }
                }
                
                //Método para capturar operandos
                public static void capturarOperando(String operando) {
                        operandosCapturados.add(operando);
                }
                
                //  Método para limpiar operandos
                public static void limpiarOperandos() {
                        operandosCapturados.clear();
                        operacionesStack.clear();
                }
        

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLAVE_IZQ INSTRUCCIONES LLAVE_DCHA 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> inst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 sentencias = inst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Instruction> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> l = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DEFINIR_CONJ 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineSet e = (DefineSet)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= OPERAR_CONJ 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OperateSet e = (OperateSet)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= EVALUACION_CONJ 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EvaluateSet e = (EvaluateSet)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINIR_CONJ ::= CONJ DOS_PUNTOS ID FLECHA LISTA PUNTO_COMA 
            {
              DefineSet RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DefineSet(n, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINIR_CONJ",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERAR_CONJ ::= OPERA DOS_PUNTOS ID FLECHA OPERADORES PUNTO_COMA 
            {
              OperateSet RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                limpiarOperandos();
                RESULT = new OperateSet(n, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAR_CONJ",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EVALUACION_CONJ ::= EVALUAR PAR_IZQ LLAVE_IZQ LISTA LLAVE_DCHA COMA ID PAR_DCHA PUNTO_COMA 
            {
              EvaluateSet RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new EvaluateSet(c, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EVALUACION_CONJ",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA ::= ELEMENTOS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> e = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ListElements(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTOS ::= ELEMENTOS COMA EXPRESION 
            {
              List<Expression> RESULT =null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> ele = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (ele == null) { ele = new ArrayList<>(); } 
                                                                ele.add(expr); RESULT = ele; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELEMENTOS ::= EXPRESION 
            {
              List<Expression> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(expr)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION ::= ENTERO 
            {
              Expression RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(en, Type.ENTERO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION ::= ASCII 
            {
              Expression RESULT =null;
		int ascleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ascright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String asc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(asc, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= ID 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(le , Type.LETRA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= CHAR_RANGE 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ch; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= EXPRESION RANGO EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RangeSet(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CHAR_RANGE ::= LLAVE_DCHA 
            {
              Expression RESULT =null;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(rb, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CHAR_RANGE ::= LLAVE_IZQ 
            {
              Expression RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(lb, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CHAR_RANGE ::= PAR_IZQ 
            {
              Expression RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(pl, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CHAR_RANGE ::= PAR_DCHA 
            {
              Expression RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(pr, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CHAR_RANGE ::= DOS_PUNTOS 
            {
              Expression RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(dp, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CHAR_RANGE ::= PUNTO_COMA 
            {
              Expression RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(pc, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CHAR_RANGE ::= COMA 
            {
              Expression RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(cm, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CHAR_RANGE ::= UNION 
            {
              Expression RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String un = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(un, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CHAR_RANGE ::= INTERSECCION 
            {
              Expression RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(in, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CHAR_RANGE ::= DIFERENCIA 
            {
              Expression RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String df = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(df, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CHAR_RANGE ::= COMPLEMENTO 
            {
              Expression RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(cp, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CHAR_RANGE ::= RANGO 
            {
              Expression RESULT =null;
		int rgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(rg, Type.SIMBOLO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHAR_RANGE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADORES ::= CONJUNTO 
            {
              Expression RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression co = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                if (co instanceof ReferenceSet) {
                capturarOperando(((ReferenceSet) co).getSetName());
                }
                RESULT = co; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADORES ::= UNION OPERADORES OPERADORES 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                operacionesStack.push("U");
                RESULT = new Operators(e1,"U",e2); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADORES ::= INTERSECCION OPERADORES OPERADORES 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                operacionesStack.push("&");
                RESULT = new Operators(e1,"&",e2); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERADORES ::= DIFERENCIA OPERADORES OPERADORES 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                operacionesStack.push("-");
                RESULT = new Operators(e1,"-",e2); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERADORES ::= COMPLEMENTO OPERADORES 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                operacionesStack.push("^");
                RESULT = new Operators(e,"^",null); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONJUNTO ::= LLAVE_IZQ ID LLAVE_DCHA 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 capturarOperando(id);
                RESULT = new ReferenceSet(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
